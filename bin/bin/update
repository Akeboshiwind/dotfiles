#!/usr/bin/env bash
# update
# TODO:
# - Better variable names
# - Support reading from a file to get a list of temporary packages to install
#   (not committed)


# >> Utils

usage() {
    cat << USAGE
Usage: update [OPTIONS]

Options:
    --defaults         Forces the script to re-run the defaults
    --spacemacs        Forces the script to pull down the latest spacemacs changes
    --man-files        Forces the script to generate man files for the commands defined in ~/bin/man
    --brew-pkg-folder  Set's the folder to look for package lists for brew. Defaults to ~/bin/pkgs/brew
    --cask-pkg-folder  Set's the folder to look for package lists for brew cask. Defaults to ~/bin/pkgs/cask
    --dry-run          Prints instead of actually doing the update

    -h, --help         Display this help and exit
    --version          Output the version information and exit

Examples:
    update             Runs the script...
                       Amazing

Report bugs to <olivershawmarshall+dotfiles@gmail.com>.
USAGE
}

version() {
    cat << VERSION
update 1.0

Copyright (C) 2019 Oliver Marshall

Written by Oliver Marshall.
VERSION
}



# >> Cli args

update_defaults=
update_spacemacs=
update_man_files=
brew_pkg_folder=~/bin/pkgs/brew
cask_pkg_folder=~/bin/pkgs/cask
dry_run=

while [ "$1" != "" ]; do
    case $1 in
        --defaults )        update_defaults=1
                            ;;
        --spacemacs )       update_spacemacs=1
                            ;;
        --man-files )       update_man_files=1
                            ;;
        --brew-pkg-folder )  shift
                            brew_pkg_folder="$1"
                            ;;
        --cask-pkg-folder ) shift
                            cask_pkg_folder="$1"
                            ;;
        --dry-run )         shift
                            dry_run=1
                            ;;
        -h | --help )       usage
                            exit
                            ;;
        --version )         version
                            exit
                            ;;
        * )                 usage
                            exit 1
    esac
    shift
done



# >> Environment setup

# Remove undesirable side effects of CDPATH variable
unset CDPATH
# Change current working directory to the directory that contains this script
cd "$( dirname "${BASH_SOURCE[0]}" )"



# >> Bashbooster

# Initialize Bash Booster
source ./lib/bashbooster.sh



# >> Update Homebrew

bb-log-info "Updating Homebrew"
if [ -z "$dry_run" ]; then
    bb-brew-update
else
    echo "TODO: --dry-run for homebrew update"
fi



# >> List packages

# Brew packages
brew_pkgs=$(clean-config $brew_pkg_folder/* \
            | sort | uniq)

if [ ! -z "$dry_run" ]; then
    bb-log-info "Brew packages listed to remain installed:"
    printf '%s\n' "${brew_pkgs[@]}"
fi

# Cask packages
cask_pkgs=$(clean-config $cask_pkg_folder/* \
            | sort | uniq)

if [ ! -z "$dry_run" ]; then
    bb-log-info "Cask packages listed to remain installed:"
    printf '%s\n' "${cask_pkgs[@]}"
fi



# >> Install packages

# Brew packages
bb-log-info "Checking for new packages"

new_brew_pkgs=$(comm -23 <(printf '%s\n' "${brew_pkgs[@]}") <(brew ls --full-name | sort))
readarray -t new_brew_pkgs <<< "$new_brew_pkgs"

if [[ -z "${new_brew_pkgs[@]}" ]]; then
    bb-log-info "No new brew packages to install"
else
    bb-log-info "Installing new brew packages"

    if [ -z "$dry_run" ]; then
        bb-brew-install "${new_brew_pkgs[@]}"
    else
        bb-log-info "Brew packages that would be installed:"
        printf '%s\n' "${new_brew_pkgs[@]}"
    fi
fi

# Cask packages

new_cask_pkgs=$(comm -23 <(printf '%s\n' "${cask_pkgs[@]}") <(brew cask ls --full-name | sort))
readarray -t new_cask_pkgs <<< "$new_cask_pkgs"

if [[ -z "${new_cask_pkgs[@]}" ]]; then
    bb-log-info "No new cask packages to install"
else
    bb-log-info "Installing new cask packages"

    if [ -z "$dry_run" ]; then
        bb-brew-cask-install "${new_cask_pkgs[@]}"
    else
        bb-log-info "Cask packages that would be installed:"
        printf '%s\n' "${new_cask_pkgs[@]}"
    fi
fi



# >> Remove old packages

# Brew packages
bb-log-info "Removing any old packages"

if [ -z "$dry_run" ]; then
    looped=0
    while : ; do
        old_brew_pkgs=$(comm -13 <(printf '%s\n' "${brew_pkgs[@]}") <(brew leaves | sort))

        if [ -z "$old_brew_pkgs" ]; then
            if [ "$looped" -eq "1" ]; then
                bb-log-info "No more brew packages to uninstall"
            else
                bb-log-info "No brew packages to uninstall"
            fi
            break
        fi

        looped=1

        echo "${old_brew_pkgs[@]}" | xargs brew rm
    done
else
    bb-log-info "Brew packages that would be removed:"
    printf '%s\n' "${old_brew_pkgs[@]}"
fi

# Cask packages
bb-log-info "Removing old cask packages"

if [ -z "$dry_run" ]; then
    looped=0
    while : ; do
        old_cask_pkgs=$(comm -13 <(printf '%s\n' "${cask_pkgs[@]}") <(brew cask ls --full-name | sort))

        if [ -z "$old_cask_pkgs" ]; then
            if [ "$looped" -eq "1" ]; then
                bb-log-info "No more cask packages to uninstall"
            else
                bb-log-info "No cask packages to uninstall"
            fi
            break
        fi

        looped=1

        echo "${old_cask_pkgs[@]}" | xargs brew cask rm
    done
else
    bb-log-info "Brew packages that would be removed:"
    printf '%s\n' "${old_cask_pkgs[@]}"
fi



# >> Update pacakges
bb-log-info "Update outdated packages"

if [ -z "$dry_run" ]; then
    brew upgrade
    brew cask upgrade
else
    echo "TODO: --dry-run for brew upgrade"
fi



# >> Defaults

if [ "$update_defaults" = "1" ]; then
    bb-flag-unset update-defaults-set
else
    bb-log-info "Not applying 'defaults', use the --defaults flag to apply"
fi

if ! bb-flag? update-defaults-set; then

    # Expand save panel by default
    defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
    defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

    # Disable the “Are you sure you want to open this application?” dialog
    defaults write com.apple.LaunchServices LSQuarantine -bool false

    # Require password immediately after sleep or screen saver begins
    defaults write com.apple.screensaver askForPassword -int 1
    defaults write com.apple.screensaver askForPasswordDelay -int 0

    # Automatically hide and show the Dock
    defaults write com.apple.dock autohide -bool true

    ## Finder settings
    # Set Home as the default location for new Finder windows
    # For other paths, use `PfLo` and `file:///full/path/here/`
    defaults write com.apple.finder NewWindowTarget -string "PfDe"
    defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/"

    # Show hidden files by default
    defaults write com.apple.finder AppleShowAllFiles -bool true

    # Show all filename extensions
    defaults write NSGlobalDomain AppleShowAllExtensions -bool true

    # Show path bar
    defaults write com.apple.finder ShowPathbar -bool true

    # Allow text selection in Quick Look
    defaults write com.apple.finder QLEnableTextSelection -bool true

    # Disable the warning when changing a file extension
    defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

    # Always open everything in Finder's column view.
    defaults write com.apple.finder FXPreferredViewStyle -string "clmv"

    # Show the ~/Library folder.
    chflags nohidden ~/Library

    bb-log-info "Restarting affected apps, some might require a logout/restart"
    for app in "cfprefsd" "Finder" "SystemUIServer"; do
        killall "${app}" > /dev/null 2>&1
    done

    bb-flag-set update-defaults-set
fi



# >> Spacemacs

if [ "$update_spacemacs" = "1" ]; then
    bb-flag-unset update-spacemacs-set
else
    bb-log-info "Not updating spacemacs, use the --spacemacs flag to force an update"
fi

if ! bb-flag? update-spacemacs-set; then

    bb-log-info "Setting up spacemacs"
    git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
    if bb-error?; then
        bb-log-info "Spacemacs already installed, updating instead"
        git -C ~/.emacs.d pull
    fi

    bb-flag-set update-spacemacs-set
fi



# >> Generate man files

if [ "$update_man_files" = "1" ]; then
    bb-flag-unset update-man-files-set
else
    bb-log-info "Not updating man files, use the --man-files flag to force an update"
fi

if ! bb-flag? update-man-files-set; then

    bb-log-info "Setting up man files for scripts"
    for filename in ~/bin/man/*; do
        base="$(basename $filename)"
        bb-log-info "Generating man files for $base"
        gen-man $base > /usr/local/share/man/man1/$base.1
    done

    bb-flag-set update-man-files-set
fi



# >> Manual Todo List:

if ! bb-flag? printed-todo-list; then
    echo '
There are still a few tasks for you to do manually:

- Give iTerm2 full disk access
    - System Preferences -> Security & Privacy -> Full Disk Access
- Stop OSX automatically rearranging spaces
    - System Preferences -> Mission Control
    - Untick 'Automatically rearrange Spaces based on most recent use'
- Setup ControlPlane
- Setup browserpass
- Set input language to Australian
  - This makes it so that you can type the '#' symbol with shift-3

'
    bb-flag-set printed-todo-list
fi

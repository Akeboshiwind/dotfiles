-- .config/nvim/init.lua
--
-- >> Directory structure:
--  .
--  ├── init.lua
--  ├── lua
--  │   ├── config
--  │   │   ├── generic
--  │   │   │   └── <generic-name>.lua
--  │   │   ├── ...
--  │   │   └── <plugin-name>.lua
--  │   └── plugins.lua
--  └── plugin
--      └── packer_compiled.vim
--
-- Execution runs in the following order:
--
--
-- >> `init.vim`
--
-- Here we do two things:
-- - Run config that doesn't belong anywhere else
-- - Install `packer.nvim` if it isn't already installed
--
--
--
-- >> `plugin/packer_compiled.vim`
--
-- This file is auto-generated by packer using the `:PackerCompile` command.
-- 
-- Here we load all the plugins we have installed.
-- Plugins and their config are loaded lazily where possible (including packer).
-- Plugins might call out to `lua/config/**/*.lua` to configure
-- themselves after running.
--
--
--
-- >> `lua/config/<plugin-name>.lua`
--
-- These files contain the individual config for each plugin.
-- Usually they'll configure the plugin and setup commands & keybinds
--
--
--
-- >> `lua/config/generic/<generic-name>.lua`
--
-- These files contain generic config that can be shared across multiple plugins
-- Generally these will return a function that takes some arguments to
-- configure the plugin.

local cmd = vim.cmd
local execute = vim.api.nvim_command
local fn = vim.fn
local opt = vim.opt
local g = vim.g


-- >> Auto Install packer.nvim

local install_path = fn.stdpath('data')..'/site/pack/packer/opt/packer.nvim'

if fn.empty(fn.glob(install_path)) > 0 then
  fn.system({'git', 'clone', 'https://github.com/wbthomason/packer.nvim', install_path})
end



-- >> Packer Commands
-- The following commands lazily load packer and then run their command

-- Install missing
cmd [[command! PackerInstall packadd packer.nvim | lua require('plugins').install()]]
-- Install missing, update installed
cmd [[command! PackerUpdate packadd packer.nvim | lua require('plugins').update()]]
-- Clean unused, install missing, update installed
cmd [[command! PackerSync packadd packer.nvim | lua require('plugins').sync()]]
-- Clean unused
cmd [[command! PackerClean packadd packer.nvim | lua require('plugins').clean()]]
-- Compiles plugins to a lazyloader, loads compiled lazyloader
cmd [[command! PackerCompile packadd packer.nvim | lua require('plugins').compile()]]



-- >> Utils

function _G.P(...)
    print(vim.inspect(...))
end



-- >> Usability

opt.ignorecase = true      -- In searches, ignore the case
opt.smartcase = true       -- Unless there's an uppercase letter
opt.splitright = true      -- Make splits to the right
opt.inccommand = 'nosplit' -- Show live replacements with the :s command
opt.updatetime = 1000      -- Make the CursorHold event trigger after 1 second not 4



-- >> Indentation

-- Enable filetype specific .vim files to be loaded
cmd [[filetype plugin indent on]] 

opt.tabstop = 4            -- Show existing tab with 4 spaces width
opt.shiftwidth = 4         -- When indenting with '>', use 4 spaces width
opt.expandtab = true       -- On pressing tab, insert 4 spaces



-- >> Filetype conversions

cmd [[au BufNewFile,BufRead Jenkinsfile setf groovy]]



-- >> Disable built-in plugins

local disabled_built_ins = { 'netrwPlugin', 'man', 'matchit' }

for i = 1, #disabled_built_ins do
    g['loaded_' .. disabled_built_ins[i]] = 1
end
